
pc-8001onDE0_subsystem.elf:     file format elf32-littlenios2
pc-8001onDE0_subsystem.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002140

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000006d4 memsz 0x000006d4 flags r-x
    LOAD off    0x000016f4 vaddr 0x000026f4 paddr 0x000026fc align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001704 vaddr 0x00002704 paddr 0x00002704 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000534  00002140  00002140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  00002674  00002674  00001674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  000026f4  000026fc  000016f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00002704  00002704  00001704  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000258  00000000  00000000  00001728  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000002a4  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001300  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a49  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002162  00000000  00000000  0000396d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000238  00000000  00000000  00005ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000718  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000037a  00000000  00000000  00006420  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000679c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000067b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000077db  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000077e0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000077e1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000077e5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000077e9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000077ed  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000077f6  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000077ff  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000011  00000000  00000000  00007808  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003c  00000000  00000000  00007819  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002140 l    d  .text	00000000 .text
00002674 l    d  .rodata	00000000 .rodata
000026f4 l    d  .rwdata	00000000 .rwdata
00002704 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0000217c l     F .text	00000024 alt_timer_Interrupt
000026c8 l     O .rodata	0000002a prg
00002704 l     O .bss	00000001 rcv
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00002368 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000023f4 g     F .text	0000002c alt_main
0000271c g     O .bss	00000100 alt_irq
000026fc g       *ABS*	00000000 __flash_rwdata_start
00002000 g       *ABS*	00000000 __alt_mem_sram
000025b4 g     F .text	00000038 alt_putstr
000026f8 g     O .rwdata	00000004 jtag_uart
00002708 g     O .bss	00000004 edge_capture_timer
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002714 g     O .bss	00000004 alt_argv
0000a6f4 g       *ABS*	00000000 _gp
0000264c g     F .text	00000008 altera_nios2_irq_init
000022c8 g     F .text	000000a0 alt_irq_register
0000281c g       *ABS*	00000000 __bss_end
0000270c g     O .bss	00000004 alt_irq_active
000020ec g     F .exceptions	00000054 alt_irq_handler
00002644 g     F .text	00000004 alt_dcache_flush_all
000026fc g       *ABS*	00000000 __ram_rwdata_end
000026f4 g       *ABS*	00000000 __ram_rodata_end
0000281c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002610 g     F .text	00000034 altera_avalon_jtag_uart_write
00002420 g     F .text	00000144 alt_printf
00002140 g     F .text	0000003c _start
000025ec g     F .text	00000004 alt_sys_init
000026f4 g       *ABS*	00000000 __ram_rwdata_start
00002674 g       *ABS*	00000000 __ram_rodata_start
0000281c g       *ABS*	00000000 __alt_stack_base
00002704 g       *ABS*	00000000 __bss_start
000021a0 g     F .text	00000128 main
00002718 g     O .bss	00000004 alt_envp
00002674 g       *ABS*	00000000 __flash_rodata_start
000025f0 g     F .text	00000020 alt_irq_init
00002710 g     O .bss	00000004 alt_argc
00002020 g       .exceptions	00000000 alt_irq_entry
00002020 g       *ABS*	00000000 __ram_exceptions_start
000026fc g       *ABS*	00000000 _edata
0000281c g       *ABS*	00000000 _end
00002140 g       *ABS*	00000000 __ram_exceptions_end
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
0000200c g       .entry	00000000 _exit
00002654 g     F .text	00000020 strlen
00002564 g     F .text	00000050 alt_putchar
00002648 g     F .text	00000004 alt_icache_flush_all
000026f4 g     O .rwdata	00000004 alt_priority_mask
00002388 g     F .text	0000006c alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08485014 	ori	at,at,8512
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .exceptions:

00002020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    2044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020ec0 	call	20ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000306 	br	2098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    208c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    2094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    2098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    209c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    20c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    20e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20e8:	ef80083a 	eret

000020ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20ec:	deffff04 	addi	sp,sp,-4
    20f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    20f4:	0009313a 	rdctl	r4,ipending
    20f8:	00c00044 	movi	r3,1
    20fc:	01400034 	movhi	r5,0
    2100:	2949c704 	addi	r5,r5,10012
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    2104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    2108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    210c:	10000726 	beq	r2,zero,212c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    2110:	29000117 	ldw	r4,4(r5)
    2114:	28800017 	ldw	r2,0(r5)
    2118:	103ee83a 	callr	r2
    211c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    2120:	10000426 	beq	r2,zero,2134 <alt_irq_handler+0x48>
    2124:	1009883a 	mov	r4,r2
    2128:	003ff306 	br	20f8 <alt_irq_handler+0xc>
    212c:	29400204 	addi	r5,r5,8
    2130:	003ff406 	br	2104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2134:	dfc00017 	ldw	ra,0(sp)
    2138:	dec00104 	addi	sp,sp,4
    213c:	f800283a 	ret

Disassembly of section .text:

00002140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2140:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2144:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2148:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    214c:	d6a9bd14 	ori	gp,gp,42740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2154:	1089c114 	ori	r2,r2,9988

    movhi r3, %hi(__bss_end)
    2158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    215c:	18ca0714 	ori	r3,r3,10268

    beq r2, r3, 1f
    2160:	10c00326 	beq	r2,r3,2170 <_start+0x30>

0:
    stw zero, (r2)
    2164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    216c:	10fffd36 	bltu	r2,r3,2164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2170:	00023880 	call	2388 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2174:	00023f40 	call	23f4 <alt_main>

00002178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2178:	003fff06 	br	2178 <alt_after_alt_main>

0000217c <alt_timer_Interrupt>:
#else
static void alt_timer_Interrupt (void* context, alt_u32 id)
#endif
{
	// タイマの割り込みが入ったビットをゼロクリア
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_0_BASE, 0);
    217c:	00802004 	movi	r2,128
    2180:	10000035 	stwio	zero,0(r2)
	// タイマのエッジキャプチャに0x1を設定にする
	edge_capture_timer = 0x1;
    2184:	00c00044 	movi	r3,1

	/* time test */
#if 1
	IOWR_ALTERA_AVALON_PIO_DATA(GPIO0_BASE, 0);
    2188:	0005883a 	mov	r2,zero
#endif
{
	// タイマの割り込みが入ったビットをゼロクリア
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_0_BASE, 0);
	// タイマのエッジキャプチャに0x1を設定にする
	edge_capture_timer = 0x1;
    218c:	d0e00515 	stw	r3,-32748(gp)

	/* time test */
#if 1
	IOWR_ALTERA_AVALON_PIO_DATA(GPIO0_BASE, 0);
    2190:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(GPIO0_BASE, 1);
    2194:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(GPIO0_BASE, 0);
    2198:	10000035 	stwio	zero,0(r2)
#endif
}
    219c:	f800283a 	ret

000021a0 <main>:

/**
 * @func main
 */
int main()
{
    21a0:	defffe04 	addi	sp,sp,-8

	int i=0;
	int j=0;
	alt_putstr("Hello from Nios II!\n");
    21a4:	01000034 	movhi	r4,0
    21a8:	21099d04 	addi	r4,r4,9844

/**
 * @func main
 */
int main()
{
    21ac:	dfc00115 	stw	ra,4(sp)
    21b0:	dc000015 	stw	r16,0(sp)

	int i=0;
	int j=0;
	alt_putstr("Hello from Nios II!\n");
    21b4:	00025b40 	call	25b4 <alt_putstr>
	IOWR_ALTERA_AVALON_TIMER_PERIODL (TIMER_0_BASE, PERIODL_VAL);		/* 3(sec) 40MHz*10ms */
	IOWR_ALTERA_AVALON_TIMER_PERIODH (TIMER_0_BASE, PERIODH_VAL);		/* 3(sec) 40MHz*10ms */
#endif

	/* Set CONT, ITO, START */
	IOWR_ALTERA_AVALON_TIMER_CONTROL (TIMER_0_BASE,
    21b8:	00c001c4 	movi	r3,7
    21bc:	00802104 	movi	r2,132
    21c0:	10c00035 	stwio	r3,0(r2)
									  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
									  ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
									  ALTERA_AVALON_TIMER_CONTROL_START_MSK);

	// タイマの割り込みハンドラを登録し、割り込みを有効にする
	alt_irq_register( TIMER_0_IRQ, (void*) &edge_capture_timer, alt_timer_Interrupt );
    21c4:	01000044 	movi	r4,1
    21c8:	d1600504 	addi	r5,gp,-32748
    21cc:	01800034 	movhi	r6,0
    21d0:	31885f04 	addi	r6,r6,8572
    21d4:	00022c80 	call	22c8 <alt_irq_register>
	alt_timer_init();

	/* Event loop never exits. */
	while (1)
	{
		if( (P_CMT_GPIO_RD() & P_CMT_LOAD) && (P_CMT_GPIO_RD() & P_CMT_MOTOR) )
    21d8:	00c01804 	movi	r3,96
    21dc:	18800037 	ldwio	r2,0(r3)
    21e0:	1080004c 	andi	r2,r2,1
    21e4:	1005003a 	cmpeq	r2,r2,zero
    21e8:	10001d1e 	bne	r2,zero,2260 <main+0xc0>
    21ec:	18800037 	ldwio	r2,0(r3)
    21f0:	1080040c 	andi	r2,r2,16
    21f4:	10001a26 	beq	r2,zero,2260 <main+0xc0>
		{
			alt_putstr("Tx start.\n");
    21f8:	01000034 	movhi	r4,0
    21fc:	2109a304 	addi	r4,r4,9868
    2200:	00025b40 	call	25b4 <alt_putstr>
    2204:	04000034 	movhi	r16,0
    2208:	8409b204 	addi	r16,r16,9928
			for(i=0; i<625000; i++); // dummy wait 2.5s
			for(i=0; i<(sizeof(prg)/sizeof(prg[0])); i++)
			{
				P_CMT_GPIO_WR(P_CMT_MCU_WR_ASSERT);
    220c:	00c01404 	movi	r3,80
    2210:	00800044 	movi	r2,1
    2214:	18800035 	stwio	r2,0(r3)
				P_CMT_DOUT_WR(prg[i]);
    2218:	81400003 	ldbu	r5,0(r16)
    221c:	00800c04 	movi	r2,48
    2220:	11400035 	stwio	r5,0(r2)
				P_CMT_GPIO_WR(P_CMT_MCU_WR_NEGATE);
    2224:	18000035 	stwio	zero,0(r3)
				for(j=0; j<10000; j++);
				alt_printf("Tx data %x\n",prg[i]);
    2228:	01000034 	movhi	r4,0
    222c:	2109a604 	addi	r4,r4,9880
    2230:	00024200 	call	2420 <alt_printf>
    2234:	00c01804 	movi	r3,96
				while( P_CMT_GPIO_RD() & P_CMT_TxRDY ); /* wait for send ok */
    2238:	18800037 	ldwio	r2,0(r3)
    223c:	1080008c 	andi	r2,r2,2
    2240:	103ffd1e 	bne	r2,zero,2238 <main+0x98>
    2244:	84000044 	addi	r16,r16,1
	{
		if( (P_CMT_GPIO_RD() & P_CMT_LOAD) && (P_CMT_GPIO_RD() & P_CMT_MOTOR) )
		{
			alt_putstr("Tx start.\n");
			for(i=0; i<625000; i++); // dummy wait 2.5s
			for(i=0; i<(sizeof(prg)/sizeof(prg[0])); i++)
    2248:	00800034 	movhi	r2,0
    224c:	1089bc84 	addi	r2,r2,9970
    2250:	80bfee1e 	bne	r16,r2,220c <main+0x6c>
				for(j=0; j<10000; j++);
				alt_printf("Tx data %x\n",prg[i]);
				while( P_CMT_GPIO_RD() & P_CMT_TxRDY ); /* wait for send ok */
			}
			for(i=0; i<325000; i++); // dummy wait 1.3s
			alt_putstr("Tx end.\n");
    2254:	01000034 	movhi	r4,0
    2258:	2109a904 	addi	r4,r4,9892
    225c:	00025b40 	call	25b4 <alt_putstr>
		}
		if( (P_CMT_GPIO_RD() & P_CMT_SAVE) && (P_CMT_GPIO_RD() & P_CMT_MOTOR) )
    2260:	04001804 	movi	r16,96
    2264:	80800037 	ldwio	r2,0(r16)
    2268:	1080010c 	andi	r2,r2,4
    226c:	103fda26 	beq	r2,zero,21d8 <main+0x38>
    2270:	80800037 	ldwio	r2,0(r16)
    2274:	1080040c 	andi	r2,r2,16
    2278:	103fd726 	beq	r2,zero,21d8 <main+0x38>
		{
			alt_putstr("Rx start.\n");
    227c:	01000034 	movhi	r4,0
    2280:	2109ac04 	addi	r4,r4,9904
    2284:	00025b40 	call	25b4 <alt_putstr>
    2288:	8007883a 	mov	r3,r16
			while( (IORD_ALTERA_AVALON_PIO_DATA(CMT_GPIO_IN_BASE) & 0x08 )); /* wait for receive ok */
    228c:	18800037 	ldwio	r2,0(r3)
    2290:	1080020c 	andi	r2,r2,8
    2294:	103ffd1e 	bne	r2,zero,228c <main+0xec>
			IOWR_ALTERA_AVALON_PIO_DATA(CMT_GPIO_OUT_BASE, P_CMT_MCU_RD_ASSERT);
    2298:	00c01404 	movi	r3,80
    229c:	00800084 	movi	r2,2
    22a0:	18800035 	stwio	r2,0(r3)
			rcv = IORD_ALTERA_AVALON_PIO_DATA(CMT_DIN_BASE);
    22a4:	00801004 	movi	r2,64
    22a8:	10800037 	ldwio	r2,0(r2)
    22ac:	d0a00405 	stb	r2,-32752(gp)
			IOWR_ALTERA_AVALON_PIO_DATA(CMT_GPIO_OUT_BASE, P_CMT_MCU_RD_NEGATE);
    22b0:	18000035 	stwio	zero,0(r3)
			for(i=0; i<10000; i++); // test wait.
			alt_printf("Rx data %x\n",rcv);
    22b4:	d1600403 	ldbu	r5,-32752(gp)
    22b8:	01000034 	movhi	r4,0
    22bc:	2109af04 	addi	r4,r4,9916
    22c0:	00024200 	call	2420 <alt_printf>
    22c4:	003fc406 	br	21d8 <main+0x38>

000022c8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    22c8:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    22cc:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    22d0:	00fffa84 	movi	r3,-22
    22d4:	11002236 	bltu	r2,r4,2360 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    22d8:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    22dc:	027fff84 	movi	r9,-2
    22e0:	5244703a 	and	r2,r10,r9
    22e4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    22e8:	200490fa 	slli	r2,r4,3
    22ec:	00c00034 	movhi	r3,0
    22f0:	18c9c704 	addi	r3,r3,10012
    22f4:	02000034 	movhi	r8,0
    22f8:	4209c304 	addi	r8,r8,9996
    22fc:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
    2300:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2304:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2308:	30000826 	beq	r6,zero,232c <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    230c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2310:	2244703a 	and	r2,r4,r9
    2314:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2318:	00c00044 	movi	r3,1
    231c:	19c6983a 	sll	r3,r3,r7
    2320:	40800017 	ldw	r2,0(r8)
    2324:	10c4b03a 	or	r2,r2,r3
    2328:	00000706 	br	2348 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    232c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2330:	2244703a 	and	r2,r4,r9
    2334:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2338:	00ffff84 	movi	r3,-2
    233c:	19c6183a 	rol	r3,r3,r7
    2340:	40800017 	ldw	r2,0(r8)
    2344:	10c4703a 	and	r2,r2,r3
    2348:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    234c:	40800017 	ldw	r2,0(r8)
    2350:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2354:	2001703a 	wrctl	status,r4
    2358:	5001703a 	wrctl	status,r10
    235c:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2360:	1805883a 	mov	r2,r3
    2364:	f800283a 	ret

00002368 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2368:	2900051e 	bne	r5,r4,2380 <alt_load_section+0x18>
    236c:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    2370:	20800017 	ldw	r2,0(r4)
    2374:	21000104 	addi	r4,r4,4
    2378:	28800015 	stw	r2,0(r5)
    237c:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2380:	29bffb1e 	bne	r5,r6,2370 <alt_load_section+0x8>
    2384:	f800283a 	ret

00002388 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2388:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    238c:	01000034 	movhi	r4,0
    2390:	2109bf04 	addi	r4,r4,9980
    2394:	01400034 	movhi	r5,0
    2398:	2949bd04 	addi	r5,r5,9972
    239c:	01800034 	movhi	r6,0
    23a0:	3189bf04 	addi	r6,r6,9980
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    23a4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    23a8:	00023680 	call	2368 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    23ac:	01000034 	movhi	r4,0
    23b0:	21080804 	addi	r4,r4,8224
    23b4:	01400034 	movhi	r5,0
    23b8:	29480804 	addi	r5,r5,8224
    23bc:	01800034 	movhi	r6,0
    23c0:	31885004 	addi	r6,r6,8512
    23c4:	00023680 	call	2368 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    23c8:	01000034 	movhi	r4,0
    23cc:	21099d04 	addi	r4,r4,9844
    23d0:	01400034 	movhi	r5,0
    23d4:	29499d04 	addi	r5,r5,9844
    23d8:	01800034 	movhi	r6,0
    23dc:	3189bd04 	addi	r6,r6,9972
    23e0:	00023680 	call	2368 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    23e4:	00026440 	call	2644 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    23e8:	dfc00017 	ldw	ra,0(sp)
    23ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    23f0:	00026481 	jmpi	2648 <alt_icache_flush_all>

000023f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    23f4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    23f8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    23fc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2400:	00025f00 	call	25f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2404:	00025ec0 	call	25ec <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2408:	d1200717 	ldw	r4,-32740(gp)
    240c:	d1600817 	ldw	r5,-32736(gp)
    2410:	d1a00917 	ldw	r6,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2414:	dfc00017 	ldw	ra,0(sp)
    2418:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    241c:	00021a01 	jmpi	21a0 <main>

00002420 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2420:	defff804 	addi	sp,sp,-32
    2424:	dfc00415 	stw	ra,16(sp)
    2428:	dc800315 	stw	r18,12(sp)
    242c:	dc400215 	stw	r17,8(sp)
    2430:	dc000115 	stw	r16,4(sp)
    2434:	d9400515 	stw	r5,20(sp)
    2438:	d9800615 	stw	r6,24(sp)
    243c:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    2440:	d8800504 	addi	r2,sp,20
    2444:	2025883a 	mov	r18,r4
    2448:	d8800015 	stw	r2,0(sp)
    244c:	00003d06 	br	2544 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2450:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2454:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2458:	18800226 	beq	r3,r2,2464 <alt_printf+0x44>
        {
            alt_putchar(c);
    245c:	1809883a 	mov	r4,r3
    2460:	00000a06 	br	248c <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2464:	91000007 	ldb	r4,0(r18)
    2468:	94800044 	addi	r18,r18,1
    246c:	20003726 	beq	r4,zero,254c <alt_printf+0x12c>
            {
                if (c == '%')
    2470:	20c00626 	beq	r4,r3,248c <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2474:	008018c4 	movi	r2,99
    2478:	2080061e 	bne	r4,r2,2494 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    247c:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    2480:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2484:	10800104 	addi	r2,r2,4
    2488:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    248c:	00025640 	call	2564 <alt_putchar>
    2490:	00002c06 	br	2544 <alt_printf+0x124>
                }
                else if (c == 'x')
    2494:	00801e04 	movi	r2,120
    2498:	20801e1e 	bne	r4,r2,2514 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    249c:	d8800017 	ldw	r2,0(sp)
    24a0:	14400017 	ldw	r17,0(r2)
    24a4:	10800104 	addi	r2,r2,4
    24a8:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    24ac:	88000226 	beq	r17,zero,24b8 <alt_printf+0x98>
    24b0:	04000704 	movi	r16,28
    24b4:	00000306 	br	24c4 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    24b8:	01000c04 	movi	r4,48
    24bc:	003ff306 	br	248c <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    24c0:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    24c4:	008003c4 	movi	r2,15
    24c8:	1404983a 	sll	r2,r2,r16
    24cc:	8884703a 	and	r2,r17,r2
    24d0:	103ffb26 	beq	r2,zero,24c0 <alt_printf+0xa0>
    24d4:	00000b06 	br	2504 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    24d8:	8884703a 	and	r2,r17,r2
    24dc:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    24e0:	00800244 	movi	r2,9
                            c = '0' + digit;
    24e4:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    24e8:	10c0012e 	bgeu	r2,r3,24f0 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    24ec:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    24f0:	21003fcc 	andi	r4,r4,255
    24f4:	2100201c 	xori	r4,r4,128
    24f8:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    24fc:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    2500:	00025640 	call	2564 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2504:	008003c4 	movi	r2,15
    2508:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    250c:	803ff20e 	bge	r16,zero,24d8 <alt_printf+0xb8>
    2510:	00000c06 	br	2544 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2514:	00801cc4 	movi	r2,115
    2518:	20800a1e 	bne	r4,r2,2544 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    251c:	d8800017 	ldw	r2,0(sp)
    2520:	14000017 	ldw	r16,0(r2)
    2524:	10800104 	addi	r2,r2,4
    2528:	d8800015 	stw	r2,0(sp)
    252c:	00000106 	br	2534 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    2530:	00025640 	call	2564 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2534:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    2538:	84000044 	addi	r16,r16,1
    253c:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2540:	103ffb1e 	bne	r2,zero,2530 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2544:	90c00007 	ldb	r3,0(r18)
    2548:	183fc11e 	bne	r3,zero,2450 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    254c:	dfc00417 	ldw	ra,16(sp)
    2550:	dc800317 	ldw	r18,12(sp)
    2554:	dc400217 	ldw	r17,8(sp)
    2558:	dc000117 	ldw	r16,4(sp)
    255c:	dec00804 	addi	sp,sp,32
    2560:	f800283a 	ret

00002564 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2564:	defffd04 	addi	sp,sp,-12
    2568:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    256c:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2570:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2574:	01800044 	movi	r6,1
    2578:	01000034 	movhi	r4,0
    257c:	2109be04 	addi	r4,r4,9976
    2580:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2584:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2588:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    258c:	00026100 	call	2610 <altera_avalon_jtag_uart_write>
    2590:	1009883a 	mov	r4,r2
    2594:	00bfffc4 	movi	r2,-1
    2598:	2080011e 	bne	r4,r2,25a0 <alt_putchar+0x3c>
    259c:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    25a0:	8005883a 	mov	r2,r16
    25a4:	dfc00217 	ldw	ra,8(sp)
    25a8:	dc000117 	ldw	r16,4(sp)
    25ac:	dec00304 	addi	sp,sp,12
    25b0:	f800283a 	ret

000025b4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    25b4:	defffe04 	addi	sp,sp,-8
    25b8:	dc000015 	stw	r16,0(sp)
    25bc:	dfc00115 	stw	ra,4(sp)
    25c0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    25c4:	00026540 	call	2654 <strlen>
    25c8:	800b883a 	mov	r5,r16
    25cc:	100d883a 	mov	r6,r2
    25d0:	01000034 	movhi	r4,0
    25d4:	2109be04 	addi	r4,r4,9976
    25d8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    25dc:	dfc00117 	ldw	ra,4(sp)
    25e0:	dc000017 	ldw	r16,0(sp)
    25e4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    25e8:	00026101 	jmpi	2610 <altera_avalon_jtag_uart_write>

000025ec <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    25ec:	f800283a 	ret

000025f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    25f0:	deffff04 	addi	sp,sp,-4
    25f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( NIOS2, nios2);
    25f8:	000264c0 	call	264c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    25fc:	00800044 	movi	r2,1
    2600:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2604:	dfc00017 	ldw	ra,0(sp)
    2608:	dec00104 	addi	sp,sp,4
    260c:	f800283a 	ret

00002610 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2610:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    2614:	298f883a 	add	r7,r5,r6
    2618:	20c00104 	addi	r3,r4,4
    261c:	00000606 	br	2638 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2620:	18800037 	ldwio	r2,0(r3)
    2624:	10bfffec 	andhi	r2,r2,65535
    2628:	10000326 	beq	r2,zero,2638 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    262c:	28800007 	ldb	r2,0(r5)
    2630:	29400044 	addi	r5,r5,1
    2634:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2638:	29fff936 	bltu	r5,r7,2620 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    263c:	3005883a 	mov	r2,r6
    2640:	f800283a 	ret

00002644 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2644:	f800283a 	ret

00002648 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2648:	f800283a 	ret

0000264c <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    264c:	000170fa 	wrctl	ienable,zero
}
    2650:	f800283a 	ret

00002654 <strlen>:
    2654:	20800007 	ldb	r2,0(r4)
    2658:	10000526 	beq	r2,zero,2670 <strlen+0x1c>
    265c:	2007883a 	mov	r3,r4
    2660:	18c00044 	addi	r3,r3,1
    2664:	18800007 	ldb	r2,0(r3)
    2668:	103ffd1e 	bne	r2,zero,2660 <strlen+0xc>
    266c:	1905c83a 	sub	r2,r3,r4
    2670:	f800283a 	ret
